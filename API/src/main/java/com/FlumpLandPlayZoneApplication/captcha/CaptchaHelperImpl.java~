package com.FlumpLandPlayZoneApplication.captcha;

import com.google.code.kaptcha.BackgroundProducer;
import lombok.extern.slf4j.Slf4j;
import net.logicsquad.nanocaptcha.image.ImageCaptcha;
import net.logicsquad.nanocaptcha.image.backgrounds.GradiatedBackgroundProducer;
import net.logicsquad.nanocaptcha.image.backgrounds.SquigglesBackgroundProducer;
import net.logicsquad.nanocaptcha.image.noise.CurvedLineNoiseProducer;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import javax.imageio.ImageIO;
import java.io.ByteArrayOutputStream;
import java.util.Base64;
import java.util.Random;

@Service
@Slf4j
public class CaptchaHelperImpl implements CaptchaHelper{
    private PasswordEncoder passwordEncoder;

    @Override
    public CaptchaInfo getCaptcha(final Integer width, final Integer height) {
        final CaptchaInfo captchaInfo = new CaptchaInfo();
        final BackgroundProducer producerGradient = new GradiatedBackgroundProducer();
        final BackgroundProducer producerSquiggle = new SquigglesBackgroundProducer();
        try {
            final ImageCaptcha imageCaptcha = new ImageCaptcha.Builder(width, height)
                    .addBackground((new Random().nextInt()) % 2 == 0 ? producerGradient : producerSquiggle)
                    .addContent()
                    .addNoise(new CurvedLineNoiseProducer())
                    .build();
            final ByteArrayOutputStream bos = new ByteArrayOutputStream();
            ImageIO.write(imageCaptcha.getImage(), "jpg", bos);
            final byte[] byteArray = Base64.getEncoder().encode(bos.toByteArray());
            captchaInfo.setImage(new String(byteArray));
            captchaInfo.setText(this.passwordEncoder.encode(imageCaptcha.getContent()));
        } catch (final Exception exception) {
            log.error("Can not generate captcha", exception);
        }

        return captchaInfo;
    }

    @Override
    public Boolean isCaptchaCorrect(final String userText, final String originalText) {
        return this.passwordEncoder.matches(userText, originalText);
    }
}

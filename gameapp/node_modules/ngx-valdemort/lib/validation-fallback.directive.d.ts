import { TemplateRef } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * The context of the ValidationFallbackDirective
 */
interface ValidationFallbackContext {
    /**
     * The label
     */
    $implicit: string | null;
    /**
     * The error
     */
    error: any;
    /**
     * The type of the error
     */
    type: string;
}
/**
 * Directive allowing to define a fallback template for an error of a type that is not handled by any validation error directive.
 * It's used inside the body of the validation errors component, or inside the body of the default validation errors directive.
 * See the documentation of these two for example usages.
 *
 * This is useful to handle forgotten errors instead of displaying no error at all, or to handle all or several error types in the same way,
 * for example by relying on the error key to choose an internationalized message.
 */
export declare class ValidationFallbackDirective {
    templateRef: TemplateRef<ValidationFallbackContext>;
    static ngTemplateContextGuard(directive: ValidationFallbackDirective, context: unknown): context is ValidationFallbackContext;
    static ɵfac: i0.ɵɵFactoryDeclaration<ValidationFallbackDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ValidationFallbackDirective, "ng-template[valFallback]", never, {}, {}, never, never, true, never>;
}
export {};

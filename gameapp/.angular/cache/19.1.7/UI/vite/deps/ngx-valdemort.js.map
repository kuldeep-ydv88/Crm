{
  "version": 3,
  "sources": ["../../../../../../node_modules/ngx-valdemort/fesm2022/ngx-valdemort.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { signal, Injectable, inject, TemplateRef, input, Directive, contentChildren, contentChild, computed, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { ControlContainer } from '@angular/forms';\nimport { NgTemplateOutlet } from '@angular/common';\n\n/**\n * Service used by the default validation errors directive to store the default error template references. This\n * service is injected in the validation errors component which displays the appropriate templates and provides their context.\n */\nconst _c0 = (a0, a1) => ({\n  $implicit: a0,\n  error: a1\n});\nconst _c1 = (a0, a1, a2) => ({\n  $implicit: a0,\n  type: a1,\n  error: a2\n});\nfunction ValidationErrorsComponent_Conditional_0_Conditional_0_For_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction ValidationErrorsComponent_Conditional_0_Conditional_0_For_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, ValidationErrorsComponent_Conditional_0_Conditional_0_For_1_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const errorDirective_r1 = ctx.$implicit;\n    const vm_r2 = i0.ɵɵnextContext(2);\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r2.errorClasses);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", errorDirective_r1.templateRef)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(4, _c0, ctx_r2.label(), vm_r2.control.errors[errorDirective_r1.type()]));\n  }\n}\nfunction ValidationErrorsComponent_Conditional_0_Conditional_0_For_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction ValidationErrorsComponent_Conditional_0_Conditional_0_For_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, ValidationErrorsComponent_Conditional_0_Conditional_0_For_3_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const error_r4 = ctx.$implicit;\n    const vm_r2 = i0.ɵɵnextContext(2);\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r2.errorClasses);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", vm_r2.errorsToDisplay.fallback.templateRef)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction3(4, _c1, ctx_r2.label(), error_r4.type, error_r4.value));\n  }\n}\nfunction ValidationErrorsComponent_Conditional_0_Conditional_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵrepeaterCreate(0, ValidationErrorsComponent_Conditional_0_Conditional_0_For_1_Template, 2, 7, \"div\", 0, i0.ɵɵrepeaterTrackByIndex);\n    i0.ɵɵrepeaterCreate(2, ValidationErrorsComponent_Conditional_0_Conditional_0_For_3_Template, 2, 8, \"div\", 0, i0.ɵɵrepeaterTrackByIndex);\n  }\n  if (rf & 2) {\n    const vm_r2 = i0.ɵɵnextContext();\n    i0.ɵɵrepeater(vm_r2.errorsToDisplay.errors);\n    i0.ɵɵadvance(2);\n    i0.ɵɵrepeater(vm_r2.errorsToDisplay.fallbackErrors);\n  }\n}\nfunction ValidationErrorsComponent_Conditional_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, ValidationErrorsComponent_Conditional_0_Conditional_0_Template, 4, 0);\n  }\n  if (rf & 2) {\n    i0.ɵɵconditional(ctx.shouldDisplayErrors ? 0 : -1);\n  }\n}\nclass DefaultValidationErrors {\n  directives = signal([]);\n  fallback = signal(undefined);\n  static ɵfac = function DefaultValidationErrors_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || DefaultValidationErrors)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: DefaultValidationErrors,\n    factory: DefaultValidationErrors.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DefaultValidationErrors, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\n/* eslint-disable @angular-eslint/directive-selector,@angular-eslint/no-input-rename */\n/**\n * Directive allowing to define the template for an error of a given type (using the `valError` input), using an ng-template.\n * It's used inside the body of the validation errors component, or inside the body of the default validation errors directive.\n * See the documentation of these two for example usages.\n */\nclass ValidationErrorDirective {\n  templateRef = inject(TemplateRef);\n  /**\n   * The type of the error that the content of the template must display.\n   */\n  type = input.required({\n    alias: 'valError'\n  });\n  static ngTemplateContextGuard(directive, context) {\n    return true;\n  }\n  static ɵfac = function ValidationErrorDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ValidationErrorDirective)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ValidationErrorDirective,\n    selectors: [[\"ng-template\", \"valError\", \"\"]],\n    inputs: {\n      type: [1, \"valError\", \"type\"]\n    }\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ValidationErrorDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[valError]'\n    }]\n  }], null, null);\n})();\n\n/* eslint-disable @angular-eslint/directive-selector,@angular-eslint/no-input-rename */\n/**\n * Directive allowing to define a fallback template for an error of a type that is not handled by any validation error directive.\n * It's used inside the body of the validation errors component, or inside the body of the default validation errors directive.\n * See the documentation of these two for example usages.\n *\n * This is useful to handle forgotten errors instead of displaying no error at all, or to handle all or several error types in the same way,\n * for example by relying on the error key to choose an internationalized message.\n */\nclass ValidationFallbackDirective {\n  templateRef = inject(TemplateRef);\n  static ngTemplateContextGuard(directive, context) {\n    return true;\n  }\n  static ɵfac = function ValidationFallbackDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ValidationFallbackDirective)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ValidationFallbackDirective,\n    selectors: [[\"ng-template\", \"valFallback\", \"\"]]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ValidationFallbackDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[valFallback]'\n    }]\n  }], null, null);\n})();\n\n/* eslint-disable @angular-eslint/directive-selector */\n/**\n * Directive allowing to register default templates for validation error messages. It's supposed to be used once,\n * typically in the root component. By using templates to do that, error messages can\n * - easily be i18ned\n * - easily use pipes\n * - easily use HTML\n * - easily be ordered\n *\n * Example usage:\n * ```\n *   <val-default-errors>\n *     <ng-template valError=\"required\">This field is mandatory</ng-template>\n *     <ng-template valError=\"max\" let-error=\"error\">This field must be at most {{ error.max | number }}</ng-template>\n *   </val-default-errors>\n * ```\n *\n * Example usage where a label is used to make the messages less generic:\n * ```\n *   <val-default-errors>\n *     <ng-template valError=\"required\" let-label>{{ label }} is mandatory</ng-template>\n *     <ng-template valError=\"max\" let-error=\"error\" let-label>{{ label }} must be at most {{ error.max | number }}</ng-template>\n *   </val-default-errors>\n * ```\n *\n * A fallback template can also be provided. This fallback template is used for all the errors that exist on the form control\n * but are not handled by any of the specific error templates:\n * ```\n *   <val-default-errors>\n *     <ng-template valError=\"required\" let-label>{{ label }} is mandatory</ng-template>\n *     <ng-template valError=\"max\" let-error=\"error\" let-label>{{ label }} must be at most {{ error.max | number }}</ng-template>\n *     <ng-template valFallback let-label let-type=\"type\" let-error=\"error\">{{ label }} has an unhandled error of type {{ type }}: {{ error | json }}</ng-template>\n *   </val-default-errors>\n * ```\n * Using the fallback can also be used to handle all the errors the same way, for example by using the error type as an i18n key\n * to display the appropriate error message.\n *\n * This directive stores the default template references in a service, that is then injected in the validation errors components\n * to be reused.\n */\nclass DefaultValidationErrorsDirective {\n  defaultValidationErrors = inject(DefaultValidationErrors);\n  /**\n   * The list of validation error directives (i.e. <ng-template valError=\"...\">)\n   * contained inside the directive element.\n   */\n  errorDirectives = contentChildren(ValidationErrorDirective);\n  /**\n   * The validation fallback directive (i.e. <ng-template valFallback>) contained inside the directive element.\n   */\n  fallbackDirective = contentChild(ValidationFallbackDirective);\n  ngAfterContentInit() {\n    this.defaultValidationErrors.directives.set(this.errorDirectives());\n    this.defaultValidationErrors.fallback.set(this.fallbackDirective());\n  }\n  static ɵfac = function DefaultValidationErrorsDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || DefaultValidationErrorsDirective)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: DefaultValidationErrorsDirective,\n    selectors: [[\"val-default-errors\"]],\n    contentQueries: function DefaultValidationErrorsDirective_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuerySignal(dirIndex, ctx.errorDirectives, ValidationErrorDirective, 4);\n        i0.ɵɵcontentQuerySignal(dirIndex, ctx.fallbackDirective, ValidationFallbackDirective, 5);\n      }\n      if (rf & 2) {\n        i0.ɵɵqueryAdvance(2);\n      }\n    },\n    hostAttrs: [2, \"display\", \"none\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DefaultValidationErrorsDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'val-default-errors',\n      host: {\n        style: 'display: none'\n      }\n    }]\n  }], null, null);\n})();\n\n/**\n * The display mode of the validation errors. For a given control, either all the validation errors\n * are displayed, or only the first one.\n */\nvar DisplayMode;\n(function (DisplayMode) {\n  DisplayMode[DisplayMode[\"ALL\"] = 0] = \"ALL\";\n  DisplayMode[DisplayMode[\"ONE\"] = 1] = \"ONE\";\n})(DisplayMode || (DisplayMode = {}));\n/**\n * The configuration service used by the validation errors component to apply common rules for all\n * form controls.\n *\n * To change its default behavior, you can either inject this service in your root module or component and mutate it,\n * or define your own implementation and provide it.\n */\nclass ValdemortConfig {\n  /**\n   * The display mode of the errors. The default value is ALL, meaning that all the errors existing on a control\n   * (and which have an error template defined) are displayed.\n   */\n  displayMode = DisplayMode.ALL;\n  /**\n   * Specifies one or several CSS classes (separated by a white space) that are automatically added to the\n   * validation errors element. This can be useful to reuse a standard CSS class of your CSS framework (like\n   * .invalid-feedback in BootStrap), rather than styling the val-errors element itself.\n   *\n   * The default value is null (no class is added).\n   */\n  errorsClasses = null;\n  /**\n   * Specifies one or several CSS classes (separated by a white space) that are automatically added to the\n   * each validation error message element. This can be useful to reuse a standard CSS class of your CSS framework\n   * rather than styling the div element itself.\n   *\n   * The default value is null (no class is added).\n   */\n  errorClasses = null;\n  /**\n   * Specifies when error messages should be displayed. based on the state of the control itself (touched, dirty, etc.)\n   * and on the state of the form directive containing it (if any). This function is only called if the control is invalid\n   * in the first place: if it's valid, errors are never displayed.\n   *\n   * The default value of this function returns true if the control is touched, or if the form (if any) is submitted.\n   */\n  shouldDisplayErrors = (control, form) => control.touched || !!form && form.submitted;\n  /**\n   * Specifies if the library should throw an error when a control is not found.\n   * For example, this can happen if a typo was made in the `controlName`.\n   * If the check is enabled, then an error will be thrown in such a case.\n   * Otherwise, the error is silently ignored.\n   *\n   * The default value of this function returns false, thus disabling the check.\n   *\n   * You can enable the check by giving it a function that returns true,\n   * or you can enable it only in development for example with:\n   * `config.shouldThrowOnMissingControl = () => !environment.production`\n   */\n  shouldThrowOnMissingControl = () => false;\n  static ɵfac = function ValdemortConfig_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ValdemortConfig)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ValdemortConfig,\n    factory: ValdemortConfig.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ValdemortConfig, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nconst NO_ERRORS = {\n  shouldDisplayErrors: false\n};\nconst NO_VALIDATION_STATE = {\n  control: null,\n  errorsDisplayed: null,\n  errors: null\n};\nfunction areValidationStatesEqual(previous, current) {\n  return previous.control === current.control && previous.errorsDisplayed === current.errorsDisplayed && previous.errors === current.errors;\n}\n/**\n * Component allowing to display validation error messages associated to a given form control, form group or form array.\n * The control is provided using the `control` input of the component. If it's used inside an enclosing form group or\n * form array, it can instead be provided using the `controlName` input of the component.\n *\n * Example usage where the control itself is being passed as input:\n * ```\n *   <val-errors [control]=\"form.controls.birthDate\">\n *     <ng-template valError=\"required\">The birth date is mandatory</ng-template>\n *     <ng-template valError=\"max\" let-error=\"error\">The max value for the birth date is {{ error.max | number }}</ng-template>\n *   </val-errors>\n * ```\n *\n * Example usage where the control name is being passed as input:\n * ```\n *   <val-errors controlName=\"birthDate\">\n *     <ng-template valError=\"required\">The birth date is mandatory</ng-template>\n *     <ng-template valError=\"max\" let-error=\"error\">The max value for the birth date is {{ error.max | number }}</ng-template>\n *   </val-errors>\n * ```\n *\n * This component, if the control is invalid, displays its validation errors using the provided templates.\n * The templates, as shown in the above example, have access to the validation error itself.\n *\n * The label of the control can also be provided as input, and then used in the templates:\n * ```\n *   <val-errors controlName=\"birthDate\" label=\"the birth date\">\n *     <ng-template valError=\"required\" let-label>{{ label }} is mandatory</ng-template>\n *     <ng-template valError=\"max\" let-error=\"error\" let-label>The max value for {{ label }} is {{ error.max | number }}</ng-template>\n *   </val-errors>\n * ```\n *\n * The component‘s behavior is configured globally by the Config service (see its documentation for more details). It can\n * - display the first error, or all the errors\n * - add CSS classes to its host `<val-errors>` element\n * - add CSS classes to each error message element being displayed\n * - choose when to display the errors (dirty, touched, touched and submitted, etc.)\n *\n * Global, default templates can be defined (and used by this component) using the default validation errors directive\n * (see its documentation for details). So, if the default error messages are defined and sufficient for a given control, all you\n * need is\n *\n * ```\n * <val-errors controlName=\"birthDate\"></val-errors>\n * ```\n *\n * or, if the default templates expect a label:\n *\n * ```\n * <val-errors controlName=\"birthDate\" label=\"the birth date\"></val-errors>\n * ```\n *\n * If, however, you want to override one or several error messages by custom ones, you can do so by simply defining them inside the\n * component:\n *\n * ```\n * <val-errors controlName=\"birthDate\" label=\"the birth date\">\n *   <ng-template valError=\"max\">You're too young, sorry</ng-template>\n * </val-errors>\n * ```\n *\n * A fallback template can also be provided. This fallback template is used for all the errors that exist on the form control\n * but are not handled by any of the specific error templates:\n * ```\n * <val-errors controlName=\"birthDate\" label=\"the birth date\">\n *   <ng-template valError=\"max\">You're too young, sorry</ng-template>\n *   <ng-template valFallback let-label let-type=\"type\" let-error=\"error\">{{ label }} has an unhandled error of type {{ type }}: {{ error | json }}</ng-template>\n * </val-errors>\n * ```\n * Note that, the fallback template can also be defined in the default validation errors directive (see its documentation for details).\n * If a fallback template is defined inside `val-errors`, it overrides the default fallback.\n *\n * If an error is present on the control, but doesn't have any template, default template or fallback template defined for its type,\n * then it's not displayed. If the control is valid, or if none of the errors of the component has a matching template or default template,\n * then this component itself is hidden.\n */\nclass ValidationErrorsComponent {\n  /**\n   * The FormControl, FormGroup or FormArray containing the validation errors.\n   * If set, the controlName input is ignored\n   */\n  control = input(null);\n  /**\n   * The name (or the index, in case it's contained in a FormArray) of the FormControl, FormGroup or FormArray containing the validation\n   * errors.\n   * Ignored if the control input is set, and only usable if the control to validate is part of a control container\n   */\n  controlName = input(null);\n  /**\n   * The label of the field, exposed to templates so they can use it in the error message.\n   */\n  label = input(null);\n  /**\n   * The list of validation error directives (i.e. <ng-template valError=\"...\">) contained inside the component element.\n   */\n  errorDirectives = contentChildren(ValidationErrorDirective);\n  /**\n   * The validation fallback directive (i.e. <ng-template valFallback>) contained inside the component element.\n   */\n  fallbackDirective = contentChild(ValidationFallbackDirective);\n  /**\n   * The Config service instance, defining the behavior of this component\n   */\n  config = inject(ValdemortConfig);\n  errorsClasses = this.config.errorsClasses || '';\n  errorClasses = this.config.errorClasses || '';\n  validationState = signal(NO_VALIDATION_STATE, {\n    equal: areValidationStatesEqual\n  });\n  /**\n   * The DefaultValidationErrors service instance, holding the default error templates,\n   * optionally defined by using the default validation errors directive\n   */\n  defaultValidationErrors = inject(DefaultValidationErrors);\n  /**\n   * The control container, if it exists, as one of the 4 form group or form array directives that can \"wrap\" the control.\n   * It's injected so that we can know if it exists and, if it does, if its form directive has been submitted or not:\n   * the config service shouldDisplayErrors function can choose (and does by default) to use that information.\n   */\n  controlContainer = inject(ControlContainer, {\n    optional: true\n  });\n  vm = computed(() => {\n    const ctrl = this.validationState().control;\n    if (this.shouldDisplayErrors(ctrl)) {\n      const errorsToDisplay = this.findErrorsToDisplay(ctrl);\n      return {\n        shouldDisplayErrors: true,\n        control: ctrl,\n        errorsToDisplay\n      };\n    } else {\n      return NO_ERRORS;\n    }\n  });\n  ngDoCheck() {\n    const ctrl = this.findActualControl();\n    if (ctrl) {\n      const formDirective = this.controlContainer?.formDirective;\n      const errorsDisplayed = this.config.shouldDisplayErrors(ctrl, formDirective);\n      this.validationState.set({\n        control: ctrl,\n        errorsDisplayed,\n        errors: ctrl.errors\n      });\n    } else {\n      this.validationState.set(NO_VALIDATION_STATE);\n    }\n  }\n  shouldDisplayErrors(ctrl) {\n    if (!ctrl || !ctrl.invalid || !this.hasDisplayableError(ctrl)) {\n      return false;\n    }\n    const form = this.controlContainer && this.controlContainer.formDirective;\n    return this.config.shouldDisplayErrors(ctrl, form ?? undefined);\n  }\n  findErrorsToDisplay(ctrl) {\n    const mergedDirectives = [];\n    const fallbackErrors = [];\n    const alreadyMetTypes = new Set();\n    const shouldContinue = () => this.config.displayMode === DisplayMode.ALL || mergedDirectives.length === 0 && fallbackErrors.length === 0;\n    const defaultValidationErrorDirectives = this.defaultValidationErrors.directives();\n    for (let i = 0; i < defaultValidationErrorDirectives.length && shouldContinue(); i++) {\n      const defaultDirective = defaultValidationErrorDirectives[i];\n      if (ctrl.hasError(defaultDirective.type())) {\n        const customDirectiveOfSameType = this.errorDirectives().find(dir => dir.type() === defaultDirective.type());\n        mergedDirectives.push(customDirectiveOfSameType || defaultDirective);\n      }\n      alreadyMetTypes.add(defaultDirective.type());\n    }\n    if (shouldContinue()) {\n      const customDirectives = this.errorDirectives();\n      for (let i = 0; i < customDirectives.length && shouldContinue(); i++) {\n        const customDirective = customDirectives[i];\n        if (ctrl.hasError(customDirective.type()) && !alreadyMetTypes.has(customDirective.type())) {\n          mergedDirectives.push(customDirective);\n        }\n        alreadyMetTypes.add(customDirective.type());\n      }\n    }\n    if (shouldContinue() && (this.fallbackDirective() || this.defaultValidationErrors.fallback())) {\n      const allErrors = Object.entries(ctrl.errors ?? []);\n      for (let i = 0; i < allErrors.length && shouldContinue(); i++) {\n        const [type, value] = allErrors[i];\n        if (!alreadyMetTypes.has(type)) {\n          fallbackErrors.push({\n            type,\n            value\n          });\n        }\n      }\n    }\n    return {\n      errors: mergedDirectives,\n      fallback: this.fallbackDirective() ?? this.defaultValidationErrors.fallback(),\n      fallbackErrors\n    };\n  }\n  findActualControl() {\n    const ctrl = this.control();\n    const ctrlName = this.controlName();\n    if (ctrl) {\n      return ctrl;\n    } else if (ctrlName != null && this.controlContainer?.control?.controls) {\n      // whether the control is a FormGroup or a FormArray, we must use .control[ctrlName] to get it\n      const control = (this.controlContainer?.control).controls[ctrlName];\n      if (this.config.shouldThrowOnMissingControl()) {\n        // if the control is null, then there are two cases:\n        // - we are in a template driven form, and the controls might not be initialized yet\n        // - there was an error in the control name. If so, let's throw an error to help developers\n        // to avoid false positive in template driven forms, we check if the controls are initialized\n        // by checking if the `controls` object or array has any element\n        if (!control && Object.keys(this.controlContainer?.control?.controls).length > 0) {\n          throw new Error(`ngx-valdemort: no control found for controlName: '${ctrlName}'.`);\n        }\n      }\n      return control;\n    }\n    return null;\n  }\n  hasDisplayableError(ctrl) {\n    return ctrl.errors && (this.fallbackDirective() || this.defaultValidationErrors.fallback() || Object.keys(ctrl.errors).some(type => this.defaultValidationErrors.directives().some(dir => dir.type() === type) || this.errorDirectives().some(dir => dir.type() === type)));\n  }\n  static ɵfac = function ValidationErrorsComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ValidationErrorsComponent)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ValidationErrorsComponent,\n    selectors: [[\"val-errors\"]],\n    contentQueries: function ValidationErrorsComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuerySignal(dirIndex, ctx.errorDirectives, ValidationErrorDirective, 4);\n        i0.ɵɵcontentQuerySignal(dirIndex, ctx.fallbackDirective, ValidationFallbackDirective, 5);\n      }\n      if (rf & 2) {\n        i0.ɵɵqueryAdvance(2);\n      }\n    },\n    hostVars: 4,\n    hostBindings: function ValidationErrorsComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.errorsClasses);\n        i0.ɵɵstyleProp(\"display\", ctx.vm().shouldDisplayErrors ? \"\" : \"none\");\n      }\n    },\n    inputs: {\n      control: [1, \"control\"],\n      controlName: [1, \"controlName\"],\n      label: [1, \"label\"]\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"class\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function ValidationErrorsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ValidationErrorsComponent_Conditional_0_Template, 1, 1);\n      }\n      if (rf & 2) {\n        let tmp_0_0;\n        i0.ɵɵconditional((tmp_0_0 = ctx.vm()) ? 0 : -1, tmp_0_0);\n      }\n    },\n    dependencies: [NgTemplateOutlet],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ValidationErrorsComponent, [{\n    type: Component,\n    args: [{\n      selector: 'val-errors',\n      host: {\n        '[class]': 'errorsClasses',\n        '[style.display]': `vm().shouldDisplayErrors ? '' : 'none'`\n      },\n      imports: [NgTemplateOutlet],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"@if (vm(); as vm) {\\n  @if (vm.shouldDisplayErrors) {\\n    @for (errorDirective of vm.errorsToDisplay.errors; track $index) {\\n      <div [class]=\\\"errorClasses\\\">\\n        <ng-container\\n          *ngTemplateOutlet=\\\"\\n            errorDirective!.templateRef;\\n            context: {\\n              $implicit: label(),\\n              error: vm.control.errors![errorDirective.type()]\\n            }\\n          \\\"\\n        />\\n      </div>\\n    }\\n    @for (error of vm.errorsToDisplay.fallbackErrors; track $index) {\\n      <div [class]=\\\"errorClasses\\\">\\n        <ng-container\\n          *ngTemplateOutlet=\\\"\\n            vm.errorsToDisplay.fallback!.templateRef;\\n            context: {\\n              $implicit: label(),\\n              type: error.type,\\n              error: error.value\\n            }\\n          \\\"\\n        />\\n      </div>\\n    }\\n  }\\n}\\n\"\n    }]\n  }], null, null);\n})();\nclass ValdemortModule {\n  static ɵfac = function ValdemortModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ValdemortModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ValdemortModule,\n    imports: [ValidationErrorsComponent, ValidationErrorDirective, ValidationFallbackDirective, DefaultValidationErrorsDirective],\n    exports: [ValidationErrorsComponent, ValidationErrorDirective, ValidationFallbackDirective, DefaultValidationErrorsDirective]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ValdemortModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ValidationErrorsComponent, ValidationErrorDirective, ValidationFallbackDirective, DefaultValidationErrorsDirective],\n      exports: [ValidationErrorsComponent, ValidationErrorDirective, ValidationFallbackDirective, DefaultValidationErrorsDirective]\n    }]\n  }], null, null);\n})();\n\n/* eslint-disable */\n/*\n * Public API Surface of ngx-validation-errors\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DefaultValidationErrorsDirective, DisplayMode, ValdemortConfig, ValdemortModule, ValidationErrorDirective, ValidationErrorsComponent, ValidationFallbackDirective };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,IAAM,MAAM,CAAC,IAAI,QAAQ;AAAA,EACvB,WAAW;AAAA,EACX,OAAO;AACT;AACA,IAAM,MAAM,CAAC,IAAI,IAAI,QAAQ;AAAA,EAC3B,WAAW;AAAA,EACX,MAAM;AAAA,EACN,OAAO;AACT;AACA,SAAS,oFAAoF,IAAI,KAAK;AACpG,MAAI,KAAK,GAAG;AACV,IAAG,mBAAmB,CAAC;AAAA,EACzB;AACF;AACA,SAAS,qEAAqE,IAAI,KAAK;AACrF,MAAI,KAAK,GAAG;AACV,IAAG,eAAe,GAAG,KAAK;AAC1B,IAAG,WAAW,GAAG,qFAAqF,GAAG,GAAG,gBAAgB,CAAC;AAC7H,IAAG,aAAa;AAAA,EAClB;AACA,MAAI,KAAK,GAAG;AACV,UAAM,oBAAoB,IAAI;AAC9B,UAAM,QAAW,cAAc,CAAC;AAChC,UAAM,SAAY,cAAc;AAChC,IAAG,WAAW,OAAO,YAAY;AACjC,IAAG,UAAU;AACb,IAAG,WAAW,oBAAoB,kBAAkB,WAAW,EAAE,2BAA8B,gBAAgB,GAAG,KAAK,OAAO,MAAM,GAAG,MAAM,QAAQ,OAAO,kBAAkB,KAAK,CAAC,CAAC,CAAC;AAAA,EACxL;AACF;AACA,SAAS,oFAAoF,IAAI,KAAK;AACpG,MAAI,KAAK,GAAG;AACV,IAAG,mBAAmB,CAAC;AAAA,EACzB;AACF;AACA,SAAS,qEAAqE,IAAI,KAAK;AACrF,MAAI,KAAK,GAAG;AACV,IAAG,eAAe,GAAG,KAAK;AAC1B,IAAG,WAAW,GAAG,qFAAqF,GAAG,GAAG,gBAAgB,CAAC;AAC7H,IAAG,aAAa;AAAA,EAClB;AACA,MAAI,KAAK,GAAG;AACV,UAAM,WAAW,IAAI;AACrB,UAAM,QAAW,cAAc,CAAC;AAChC,UAAM,SAAY,cAAc;AAChC,IAAG,WAAW,OAAO,YAAY;AACjC,IAAG,UAAU;AACb,IAAG,WAAW,oBAAoB,MAAM,gBAAgB,SAAS,WAAW,EAAE,2BAA8B,gBAAgB,GAAG,KAAK,OAAO,MAAM,GAAG,SAAS,MAAM,SAAS,KAAK,CAAC;AAAA,EACpL;AACF;AACA,SAAS,+DAA+D,IAAI,KAAK;AAC/E,MAAI,KAAK,GAAG;AACV,IAAG,iBAAiB,GAAG,sEAAsE,GAAG,GAAG,OAAO,GAAM,sBAAsB;AACtI,IAAG,iBAAiB,GAAG,sEAAsE,GAAG,GAAG,OAAO,GAAM,sBAAsB;AAAA,EACxI;AACA,MAAI,KAAK,GAAG;AACV,UAAM,QAAW,cAAc;AAC/B,IAAG,WAAW,MAAM,gBAAgB,MAAM;AAC1C,IAAG,UAAU,CAAC;AACd,IAAG,WAAW,MAAM,gBAAgB,cAAc;AAAA,EACpD;AACF;AACA,SAAS,iDAAiD,IAAI,KAAK;AACjE,MAAI,KAAK,GAAG;AACV,IAAG,WAAW,GAAG,gEAAgE,GAAG,CAAC;AAAA,EACvF;AACA,MAAI,KAAK,GAAG;AACV,IAAG,cAAc,IAAI,sBAAsB,IAAI,EAAE;AAAA,EACnD;AACF;AACA,IAAM,0BAAN,MAAM,yBAAwB;AAAA,EAC5B,aAAa,OAAO,CAAC,CAAC;AAAA,EACtB,WAAW,OAAO,MAAS;AAAA,EAC3B,OAAO,OAAO,SAAS,gCAAgC,mBAAmB;AACxE,WAAO,KAAK,qBAAqB,0BAAyB;AAAA,EAC5D;AAAA,EACA,OAAO,QAA0B,mBAAmB;AAAA,IAClD,OAAO;AAAA,IACP,SAAS,yBAAwB;AAAA,IACjC,YAAY;AAAA,EACd,CAAC;AACH;AAAA,CACC,MAAM;AACL,GAAC,OAAO,cAAc,eAAe,cAAiB,iBAAkB,yBAAyB,CAAC;AAAA,IAChG,MAAM;AAAA,IACN,MAAM,CAAC;AAAA,MACL,YAAY;AAAA,IACd,CAAC;AAAA,EACH,CAAC,GAAG,MAAM,IAAI;AAChB,GAAG;AAQH,IAAM,2BAAN,MAAM,0BAAyB;AAAA,EAC7B,cAAc,OAAO,WAAW;AAAA;AAAA;AAAA;AAAA,EAIhC,OAAO,MAAM,SAAS;AAAA,IACpB,OAAO;AAAA,EACT,CAAC;AAAA,EACD,OAAO,uBAAuB,WAAW,SAAS;AAChD,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,SAAS,iCAAiC,mBAAmB;AACzE,WAAO,KAAK,qBAAqB,2BAA0B;AAAA,EAC7D;AAAA,EACA,OAAO,OAAyB,kBAAkB;AAAA,IAChD,MAAM;AAAA,IACN,WAAW,CAAC,CAAC,eAAe,YAAY,EAAE,CAAC;AAAA,IAC3C,QAAQ;AAAA,MACN,MAAM,CAAC,GAAG,YAAY,MAAM;AAAA,IAC9B;AAAA,EACF,CAAC;AACH;AAAA,CACC,MAAM;AACL,GAAC,OAAO,cAAc,eAAe,cAAiB,iBAAkB,0BAA0B,CAAC;AAAA,IACjG,MAAM;AAAA,IACN,MAAM,CAAC;AAAA,MACL,UAAU;AAAA,IACZ,CAAC;AAAA,EACH,CAAC,GAAG,MAAM,IAAI;AAChB,GAAG;AAWH,IAAM,8BAAN,MAAM,6BAA4B;AAAA,EAChC,cAAc,OAAO,WAAW;AAAA,EAChC,OAAO,uBAAuB,WAAW,SAAS;AAChD,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,SAAS,oCAAoC,mBAAmB;AAC5E,WAAO,KAAK,qBAAqB,8BAA6B;AAAA,EAChE;AAAA,EACA,OAAO,OAAyB,kBAAkB;AAAA,IAChD,MAAM;AAAA,IACN,WAAW,CAAC,CAAC,eAAe,eAAe,EAAE,CAAC;AAAA,EAChD,CAAC;AACH;AAAA,CACC,MAAM;AACL,GAAC,OAAO,cAAc,eAAe,cAAiB,iBAAkB,6BAA6B,CAAC;AAAA,IACpG,MAAM;AAAA,IACN,MAAM,CAAC;AAAA,MACL,UAAU;AAAA,IACZ,CAAC;AAAA,EACH,CAAC,GAAG,MAAM,IAAI;AAChB,GAAG;AA0CH,IAAM,mCAAN,MAAM,kCAAiC;AAAA,EACrC,0BAA0B,OAAO,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKxD,kBAAkB,gBAAgB,wBAAwB;AAAA;AAAA;AAAA;AAAA,EAI1D,oBAAoB,aAAa,2BAA2B;AAAA,EAC5D,qBAAqB;AACnB,SAAK,wBAAwB,WAAW,IAAI,KAAK,gBAAgB,CAAC;AAClE,SAAK,wBAAwB,SAAS,IAAI,KAAK,kBAAkB,CAAC;AAAA,EACpE;AAAA,EACA,OAAO,OAAO,SAAS,yCAAyC,mBAAmB;AACjF,WAAO,KAAK,qBAAqB,mCAAkC;AAAA,EACrE;AAAA,EACA,OAAO,OAAyB,kBAAkB;AAAA,IAChD,MAAM;AAAA,IACN,WAAW,CAAC,CAAC,oBAAoB,CAAC;AAAA,IAClC,gBAAgB,SAAS,gDAAgD,IAAI,KAAK,UAAU;AAC1F,UAAI,KAAK,GAAG;AACV,QAAG,qBAAqB,UAAU,IAAI,iBAAiB,0BAA0B,CAAC;AAClF,QAAG,qBAAqB,UAAU,IAAI,mBAAmB,6BAA6B,CAAC;AAAA,MACzF;AACA,UAAI,KAAK,GAAG;AACV,QAAG,eAAe,CAAC;AAAA,MACrB;AAAA,IACF;AAAA,IACA,WAAW,CAAC,GAAG,WAAW,MAAM;AAAA,EAClC,CAAC;AACH;AAAA,CACC,MAAM;AACL,GAAC,OAAO,cAAc,eAAe,cAAiB,iBAAkB,kCAAkC,CAAC;AAAA,IACzG,MAAM;AAAA,IACN,MAAM,CAAC;AAAA,MACL,UAAU;AAAA,MACV,MAAM;AAAA,QACJ,OAAO;AAAA,MACT;AAAA,IACF,CAAC;AAAA,EACH,CAAC,GAAG,MAAM,IAAI;AAChB,GAAG;AAMH,IAAI;AAAA,CACH,SAAUA,cAAa;AACtB,EAAAA,aAAYA,aAAY,KAAK,IAAI,CAAC,IAAI;AACtC,EAAAA,aAAYA,aAAY,KAAK,IAAI,CAAC,IAAI;AACxC,GAAG,gBAAgB,cAAc,CAAC,EAAE;AAQpC,IAAM,kBAAN,MAAM,iBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKpB,cAAc,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ1B,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQhB,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQf,sBAAsB,CAAC,SAAS,SAAS,QAAQ,WAAW,CAAC,CAAC,QAAQ,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAa3E,8BAA8B,MAAM;AAAA,EACpC,OAAO,OAAO,SAAS,wBAAwB,mBAAmB;AAChE,WAAO,KAAK,qBAAqB,kBAAiB;AAAA,EACpD;AAAA,EACA,OAAO,QAA0B,mBAAmB;AAAA,IAClD,OAAO;AAAA,IACP,SAAS,iBAAgB;AAAA,IACzB,YAAY;AAAA,EACd,CAAC;AACH;AAAA,CACC,MAAM;AACL,GAAC,OAAO,cAAc,eAAe,cAAiB,iBAAkB,iBAAiB,CAAC;AAAA,IACxF,MAAM;AAAA,IACN,MAAM,CAAC;AAAA,MACL,YAAY;AAAA,IACd,CAAC;AAAA,EACH,CAAC,GAAG,MAAM,IAAI;AAChB,GAAG;AACH,IAAM,YAAY;AAAA,EAChB,qBAAqB;AACvB;AACA,IAAM,sBAAsB;AAAA,EAC1B,SAAS;AAAA,EACT,iBAAiB;AAAA,EACjB,QAAQ;AACV;AACA,SAAS,yBAAyB,UAAU,SAAS;AACnD,SAAO,SAAS,YAAY,QAAQ,WAAW,SAAS,oBAAoB,QAAQ,mBAAmB,SAAS,WAAW,QAAQ;AACrI;AA6EA,IAAM,4BAAN,MAAM,2BAA0B;AAAA;AAAA;AAAA;AAAA;AAAA,EAK9B,UAAU,MAAM,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMpB,cAAc,MAAM,IAAI;AAAA;AAAA;AAAA;AAAA,EAIxB,QAAQ,MAAM,IAAI;AAAA;AAAA;AAAA;AAAA,EAIlB,kBAAkB,gBAAgB,wBAAwB;AAAA;AAAA;AAAA;AAAA,EAI1D,oBAAoB,aAAa,2BAA2B;AAAA;AAAA;AAAA;AAAA,EAI5D,SAAS,OAAO,eAAe;AAAA,EAC/B,gBAAgB,KAAK,OAAO,iBAAiB;AAAA,EAC7C,eAAe,KAAK,OAAO,gBAAgB;AAAA,EAC3C,kBAAkB,OAAO,qBAAqB;AAAA,IAC5C,OAAO;AAAA,EACT,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,0BAA0B,OAAO,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMxD,mBAAmB,OAAO,kBAAkB;AAAA,IAC1C,UAAU;AAAA,EACZ,CAAC;AAAA,EACD,KAAK,SAAS,MAAM;AAClB,UAAM,OAAO,KAAK,gBAAgB,EAAE;AACpC,QAAI,KAAK,oBAAoB,IAAI,GAAG;AAClC,YAAM,kBAAkB,KAAK,oBAAoB,IAAI;AACrD,aAAO;AAAA,QACL,qBAAqB;AAAA,QACrB,SAAS;AAAA,QACT;AAAA,MACF;AAAA,IACF,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF,CAAC;AAAA,EACD,YAAY;AACV,UAAM,OAAO,KAAK,kBAAkB;AACpC,QAAI,MAAM;AACR,YAAM,gBAAgB,KAAK,kBAAkB;AAC7C,YAAM,kBAAkB,KAAK,OAAO,oBAAoB,MAAM,aAAa;AAC3E,WAAK,gBAAgB,IAAI;AAAA,QACvB,SAAS;AAAA,QACT;AAAA,QACA,QAAQ,KAAK;AAAA,MACf,CAAC;AAAA,IACH,OAAO;AACL,WAAK,gBAAgB,IAAI,mBAAmB;AAAA,IAC9C;AAAA,EACF;AAAA,EACA,oBAAoB,MAAM;AACxB,QAAI,CAAC,QAAQ,CAAC,KAAK,WAAW,CAAC,KAAK,oBAAoB,IAAI,GAAG;AAC7D,aAAO;AAAA,IACT;AACA,UAAM,OAAO,KAAK,oBAAoB,KAAK,iBAAiB;AAC5D,WAAO,KAAK,OAAO,oBAAoB,MAAM,QAAQ,MAAS;AAAA,EAChE;AAAA,EACA,oBAAoB,MAAM;AACxB,UAAM,mBAAmB,CAAC;AAC1B,UAAM,iBAAiB,CAAC;AACxB,UAAM,kBAAkB,oBAAI,IAAI;AAChC,UAAM,iBAAiB,MAAM,KAAK,OAAO,gBAAgB,YAAY,OAAO,iBAAiB,WAAW,KAAK,eAAe,WAAW;AACvI,UAAM,mCAAmC,KAAK,wBAAwB,WAAW;AACjF,aAAS,IAAI,GAAG,IAAI,iCAAiC,UAAU,eAAe,GAAG,KAAK;AACpF,YAAM,mBAAmB,iCAAiC,CAAC;AAC3D,UAAI,KAAK,SAAS,iBAAiB,KAAK,CAAC,GAAG;AAC1C,cAAM,4BAA4B,KAAK,gBAAgB,EAAE,KAAK,SAAO,IAAI,KAAK,MAAM,iBAAiB,KAAK,CAAC;AAC3G,yBAAiB,KAAK,6BAA6B,gBAAgB;AAAA,MACrE;AACA,sBAAgB,IAAI,iBAAiB,KAAK,CAAC;AAAA,IAC7C;AACA,QAAI,eAAe,GAAG;AACpB,YAAM,mBAAmB,KAAK,gBAAgB;AAC9C,eAAS,IAAI,GAAG,IAAI,iBAAiB,UAAU,eAAe,GAAG,KAAK;AACpE,cAAM,kBAAkB,iBAAiB,CAAC;AAC1C,YAAI,KAAK,SAAS,gBAAgB,KAAK,CAAC,KAAK,CAAC,gBAAgB,IAAI,gBAAgB,KAAK,CAAC,GAAG;AACzF,2BAAiB,KAAK,eAAe;AAAA,QACvC;AACA,wBAAgB,IAAI,gBAAgB,KAAK,CAAC;AAAA,MAC5C;AAAA,IACF;AACA,QAAI,eAAe,MAAM,KAAK,kBAAkB,KAAK,KAAK,wBAAwB,SAAS,IAAI;AAC7F,YAAM,YAAY,OAAO,QAAQ,KAAK,UAAU,CAAC,CAAC;AAClD,eAAS,IAAI,GAAG,IAAI,UAAU,UAAU,eAAe,GAAG,KAAK;AAC7D,cAAM,CAAC,MAAM,KAAK,IAAI,UAAU,CAAC;AACjC,YAAI,CAAC,gBAAgB,IAAI,IAAI,GAAG;AAC9B,yBAAe,KAAK;AAAA,YAClB;AAAA,YACA;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AACA,WAAO;AAAA,MACL,QAAQ;AAAA,MACR,UAAU,KAAK,kBAAkB,KAAK,KAAK,wBAAwB,SAAS;AAAA,MAC5E;AAAA,IACF;AAAA,EACF;AAAA,EACA,oBAAoB;AAClB,UAAM,OAAO,KAAK,QAAQ;AAC1B,UAAM,WAAW,KAAK,YAAY;AAClC,QAAI,MAAM;AACR,aAAO;AAAA,IACT,WAAW,YAAY,QAAQ,KAAK,kBAAkB,SAAS,UAAU;AAEvE,YAAM,WAAW,KAAK,kBAAkB,SAAS,SAAS,QAAQ;AAClE,UAAI,KAAK,OAAO,4BAA4B,GAAG;AAM7C,YAAI,CAAC,WAAW,OAAO,KAAK,KAAK,kBAAkB,SAAS,QAAQ,EAAE,SAAS,GAAG;AAChF,gBAAM,IAAI,MAAM,qDAAqD,QAAQ,IAAI;AAAA,QACnF;AAAA,MACF;AACA,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAAA,EACA,oBAAoB,MAAM;AACxB,WAAO,KAAK,WAAW,KAAK,kBAAkB,KAAK,KAAK,wBAAwB,SAAS,KAAK,OAAO,KAAK,KAAK,MAAM,EAAE,KAAK,UAAQ,KAAK,wBAAwB,WAAW,EAAE,KAAK,SAAO,IAAI,KAAK,MAAM,IAAI,KAAK,KAAK,gBAAgB,EAAE,KAAK,SAAO,IAAI,KAAK,MAAM,IAAI,CAAC;AAAA,EAC3Q;AAAA,EACA,OAAO,OAAO,SAAS,kCAAkC,mBAAmB;AAC1E,WAAO,KAAK,qBAAqB,4BAA2B;AAAA,EAC9D;AAAA,EACA,OAAO,OAAyB,kBAAkB;AAAA,IAChD,MAAM;AAAA,IACN,WAAW,CAAC,CAAC,YAAY,CAAC;AAAA,IAC1B,gBAAgB,SAAS,yCAAyC,IAAI,KAAK,UAAU;AACnF,UAAI,KAAK,GAAG;AACV,QAAG,qBAAqB,UAAU,IAAI,iBAAiB,0BAA0B,CAAC;AAClF,QAAG,qBAAqB,UAAU,IAAI,mBAAmB,6BAA6B,CAAC;AAAA,MACzF;AACA,UAAI,KAAK,GAAG;AACV,QAAG,eAAe,CAAC;AAAA,MACrB;AAAA,IACF;AAAA,IACA,UAAU;AAAA,IACV,cAAc,SAAS,uCAAuC,IAAI,KAAK;AACrE,UAAI,KAAK,GAAG;AACV,QAAG,WAAW,IAAI,aAAa;AAC/B,QAAG,YAAY,WAAW,IAAI,GAAG,EAAE,sBAAsB,KAAK,MAAM;AAAA,MACtE;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,SAAS,CAAC,GAAG,SAAS;AAAA,MACtB,aAAa,CAAC,GAAG,aAAa;AAAA,MAC9B,OAAO,CAAC,GAAG,OAAO;AAAA,IACpB;AAAA,IACA,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ,CAAC,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,oBAAoB,yBAAyB,CAAC;AAAA,IACzE,UAAU,SAAS,mCAAmC,IAAI,KAAK;AAC7D,UAAI,KAAK,GAAG;AACV,QAAG,WAAW,GAAG,kDAAkD,GAAG,CAAC;AAAA,MACzE;AACA,UAAI,KAAK,GAAG;AACV,YAAI;AACJ,QAAG,eAAe,UAAU,IAAI,GAAG,KAAK,IAAI,IAAI,OAAO;AAAA,MACzD;AAAA,IACF;AAAA,IACA,cAAc,CAAC,gBAAgB;AAAA,IAC/B,eAAe;AAAA,IACf,iBAAiB;AAAA,EACnB,CAAC;AACH;AAAA,CACC,MAAM;AACL,GAAC,OAAO,cAAc,eAAe,cAAiB,iBAAkB,2BAA2B,CAAC;AAAA,IAClG,MAAM;AAAA,IACN,MAAM,CAAC;AAAA,MACL,UAAU;AAAA,MACV,MAAM;AAAA,QACJ,WAAW;AAAA,QACX,mBAAmB;AAAA,MACrB;AAAA,MACA,SAAS,CAAC,gBAAgB;AAAA,MAC1B,iBAAiB,wBAAwB;AAAA,MACzC,UAAU;AAAA,IACZ,CAAC;AAAA,EACH,CAAC,GAAG,MAAM,IAAI;AAChB,GAAG;AACH,IAAM,kBAAN,MAAM,iBAAgB;AAAA,EACpB,OAAO,OAAO,SAAS,wBAAwB,mBAAmB;AAChE,WAAO,KAAK,qBAAqB,kBAAiB;AAAA,EACpD;AAAA,EACA,OAAO,OAAyB,iBAAiB;AAAA,IAC/C,MAAM;AAAA,IACN,SAAS,CAAC,2BAA2B,0BAA0B,6BAA6B,gCAAgC;AAAA,IAC5H,SAAS,CAAC,2BAA2B,0BAA0B,6BAA6B,gCAAgC;AAAA,EAC9H,CAAC;AAAA,EACD,OAAO,OAAyB,iBAAiB,CAAC,CAAC;AACrD;AAAA,CACC,MAAM;AACL,GAAC,OAAO,cAAc,eAAe,cAAiB,iBAAkB,iBAAiB,CAAC;AAAA,IACxF,MAAM;AAAA,IACN,MAAM,CAAC;AAAA,MACL,SAAS,CAAC,2BAA2B,0BAA0B,6BAA6B,gCAAgC;AAAA,MAC5H,SAAS,CAAC,2BAA2B,0BAA0B,6BAA6B,gCAAgC;AAAA,IAC9H,CAAC;AAAA,EACH,CAAC,GAAG,MAAM,IAAI;AAChB,GAAG;",
  "names": ["DisplayMode"]
}
